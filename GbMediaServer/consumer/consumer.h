

/***********************************************************************************************
created: 		2025-04-26

author:			chensong

purpose:		GOPMGR






输赢不重要，答案对你们有什么意义才重要。

光阴者，百代之过客也，唯有奋力奔跑，方能生风起时，是时代造英雄，英雄存在于时代。或许世人道你轻狂，可你本就年少啊。 看护好，自己的理想和激情。


我可能会遇到很多的人，听他们讲好2多的故事，我来写成故事或编成歌，用我学来的各种乐器演奏它。
然后还可能在一个国家遇到一个心仪我的姑娘，她可能会被我帅气的外表捕获，又会被我深邃的内涵吸引，在某个下雨的夜晚，她会全身淋透然后要在我狭小的住处换身上的湿衣服。
3小时候后她告诉我她其实是这个国家的公主，她愿意向父皇求婚。我不得已告诉她我是穿越而来的男主角，我始终要回到自己的世界。
然后我的身影慢慢消失，我看到她眼里的泪水，心里却没有任何痛苦，我才知道，原来我的心被丢掉了，我游历全世界的原因，就是要找回自己的本心。
于是我开始有意寻找各种各样失去心的人，我变成一块砖头，一颗树，一滴水，一朵白云，去听大家为什么会失去自己的本心。
我发现，刚出生的宝宝，本心还在，慢慢的，他们的本心就会消失，收到了各种黑暗之光的侵蚀。
从一次争论，到嫉妒和悲愤，还有委屈和痛苦，我看到一只只无形的手，把他们的本心扯碎，蒙蔽，偷走，再也回不到主人都身边。
我叫他本心猎手。他可能是和宇宙同在的级别 但是我并不害怕，我仔细回忆自己平淡的一生 寻找本心猎手的痕迹。
沿着自己的回忆，一个个的场景忽闪而过，最后发现，我的本心，在我写代码的时候，会回来。
安静，淡然，代码就是我的一切，写代码就是我本心回归的最好方式，我还没找到本心猎手，但我相信，顺着这个线索，我一定能顺藤摸瓜，把他揪出来。
************************************************************************************************/

#ifndef _C_GB_MEDIA_SERVER_CONSUMER_H_
#define _C_GB_MEDIA_SERVER_CONSUMER_H_



#include <cstdint>
#include <memory>   
#include <vector>  
#include <string>

#include <atomic>

#include "rtc_base/copy_on_write_buffer.h"

#include "libmedia_codec/encoded_image.h"
#include "rtc_base/socket_address.h"
//#include "server/stream.h"
//#include "server/session.h"
#include "share/share_resource.h"

#if TEST_RTC_PLAY
#include "libmedia_codec/x264_encoder.h"
#include "libcross_platform_collection_render/track_capture/ctrack_capture.h"
#endif // 
#include "libmedia_transfer_protocol/muxer/muxer.h"
namespace gb_media_server
{
	 

		 
		 
		
		 
		 
		class Consumer : public ShareResource, public sigslot::has_slots<>
		{
		public:
			Consumer( const std::shared_ptr<Stream> & stream, const std::shared_ptr<Session> &s);
			virtual ~Consumer() ;
		public:


		 
		public:
			void SetCapture(bool value);


			void StartCapture();
			void StopCapture();

			// 本地采集的数据进行编码后进行发送的接口
			void   SendVideoEncode(std::shared_ptr<libmedia_codec::EncodedImage> f);
			void   SendAudioEncode(std::shared_ptr<libmedia_codec::AudioEncoder::EncodedInfoLeaf> f);
		public:

			//接受不同协议上层处理 实现
			//virtual  void OnRecv(const rtc::CopyOnWriteBuffer&  buffer) {}

			/**
			   video :需要先发送sps_ 和pps_ 反正不处理该包
			   audio: 不处理直接转发
			*/
			void     AddVideoFrame(const libmedia_codec::EncodedImage &frame);
			void     AddAudioFrame(const rtc::CopyOnWriteBuffer& frame);
			//播放端继承
			virtual void OnVideoFrame(const libmedia_codec::EncodedImage &frame) {}
			virtual void OnAudioFrame(const rtc::CopyOnWriteBuffer& frame) {}
		public:
			//网络层接口
			//void Close();
			
		protected:
			rtc::CopyOnWriteBuffer                     sps_;
			rtc::CopyOnWriteBuffer						pps_;

			bool                                         send_sps_pps_;
			rtc::Buffer                                video_buffer_frame_;

#if TEST_RTC_PLAY

			bool										capture_type_;//采集桌面画面播放
			std::unique_ptr< rtc::Thread>        video_encoder_thread_;
			std::unique_ptr< libmedia_codec::X264Encoder>                          x264_encoder_;
			rtc::scoped_refptr<libcross_platform_collection_render::CapturerTrackSource>     capturer_track_source_;
			
#endif //
			libmedia_transfer_protocol::Muxer    *      muxer_;
		};
 
}

#endif // 